plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "vad.adler.sampleapp"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled true
    }

    viewBinding {
        enabled true
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// Dagger is implemented using Java's annotations model. It generates code at compile-time using an
// annotation processor. Annotation processors are supported in Kotlin with the kapt compiler plugin.
apply plugin: 'kotlin-kapt'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    def moshi_version="1.12.0"
    def retrofit2_version = "2.6.0"
    def okhttp3_version = "3.12.0"
    def kotlin_coroutine_version = "1.0.1"
    def kotlin_version = "1.4"
    def logging_interceptor_version = "4.9.2"
    def lifecycle_extensions_version = "2.2.0"
    def appcompat_version = "1.3.1"
    def core_version = "1.6.0"
    def constraint_layout_version = "2.1.1"
    def junit_version = "4.13.2"
    def android_junit_version = "1.1.3"
    def android_espresso_version = "3.4.0"
    def material_design_version = "1.4.0"
    def dagger_version = "2.38.1"
    def arrow_version = "1.0.0"
    def timber_version = "5.0.1"
    def nav_version = "2.3.5"
    def picasso_version = "2.71828"

    // Timber.
    implementation "com.jakewharton.timber:timber:$timber_version"

    //Moshi. https://github.com/square/moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    //Retrofit2. https://github.com/square/retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit2_version"

    //Okhttp3.
    implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"

    //Kotlin Coroutines. https://github.com/Kotlin/kotlinx.coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"

    // LifeCycle extensions. https://developer.android.com/jetpack/androidx/releases/lifecycle
    // Lifecycle-aware components perform actions in response to a change in the lifecycle status of
    // another component, such as activities and fragments. These components help you produce
    // better-organized, and often lighter-weight code, that is easier to maintain.
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_extensions_version"

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Allows access to new APIs on older API versions of the platform.
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    // Kotlin.
    implementation "androidx.core:core-ktx:$core_version"
//    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$core_version"
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$core_version"
//    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$core_version"

    // Constraint layout.
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // Material design.
    implementation "com.google.android.material:material:$material_design_version"

    testImplementation "junit:junit:$junit_version"

    // Testing in Android. https://developer.android.com/jetpack/androidx/releases/test
    androidTestImplementation "androidx.test.ext:junit:$android_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$android_espresso_version"

    implementation 'wu.seal.jsontokotlin:library:3.6.1'

    // Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Arrow.
    // Arrow Core. Functional companion to Kotlinâ€™s Standard Library https://arrow-kt.io/docs/core/
    implementation("io.arrow-kt:arrow-core:$arrow_version")

    // Navigation component.
    // Java language implementation
//    implementation("androidx.navigation:navigation-fragment:$nav_version")
//    implementation("androidx.navigation:navigation-ui:$nav_version")

    // Kotlin
    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")

    // Feature module Support
    implementation("androidx.navigation:navigation-dynamic-features-fragment:$nav_version")

    // Testing Navigation
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")

    // Picasso
    implementation("com.squareup.picasso:picasso:$picasso_version")
}